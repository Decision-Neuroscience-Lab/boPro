mtext("http://research.stowers-institute.org/efg/R/Color/Chart",
cex=0.6)
for (j in 0:(rowCount-1))
{
base <- j*colCount
remaining <- length(colors()) - base
RowSize <- ifelse(remaining < colCount, remaining, colCount)
rect((1:RowSize)-0.5,j-0.5, (1:RowSize)+0.5,j+0.5,
border="black",
col=colors()[base + (1:RowSize)])
text((1:RowSize), j, paste(base + (1:RowSize)), cex=0.7,
col=TextContrastColor[base + (1:RowSize)])
}
# 1b.  Plot matrix of R colors, in "hue" order, 25 per row.
# This example plots each rectangle one at a time.
RGBColors <- col2rgb(colors()[1:length(colors())])
HSVColors <- rgb2hsv( RGBColors[1,], RGBColors[2,], RGBColors[3,], maxColorValue=255)
HueOrder  <- order( HSVColors[1,], HSVColors[2,], HSVColors[3,] )
plot(0, type="n", ylab="", xlab="",
axes=FALSE, ylim=c(rowCount,0), xlim=c(1,colCount))
title("R colors -- Sorted by Hue, Saturation, Value")
for (j in 0:(rowCount-1))
{
for (i in 1:colCount)
{
k <- j*colCount + i
if (k <= length(colors()))
{
rect(i-0.5,j-0.5, i+0.5,j+0.5, border="black", col=colors()[ HueOrder[k] ])
text(i,j, paste(HueOrder[k]), cex=0.7, col=TextContrastColor[ HueOrder[k] ])
}
}
}
# 2. Create 7-page color chart showing rectangle block of color, along with
# index, color name, and RGB constants in hex and decimal.
# Define string vector of RGB hex and decimal constants for given color
# as a string.
#   Example:
#     > GetColorHexAndDecimal("yellow")
#     [1] "#FFFF00   255 255   0"
GetColorHexAndDecimal <- function(color)
{
c <- col2rgb(color)
sprintf("#%02X%02X%02X   %3d %3d %3d", c[1],c[2],c[3], c[1], c[2], c[3])
}
# Restore, change and save graphics parameters
par(oldparameters)
oldparameters <- par(mar=c(1,1,1,1))
# Prepare text vectors to be displayed, in addition to color names.
index <- paste(1:length(colors()))
HexAndDec <- unlist( lapply(colors(), GetColorHexAndDecimal) )
PerColumn <- 50
PerPage   <- 2*PerColumn
# Plot a column of color rectangles at a time for each page.
for (page in 1: (trunc( (length(colors()) + (PerPage-1)) / PerPage) )  )
{
plot(0, type="n", ylab="", xlab="",
axes=FALSE, ylim=c(PerColumn,0), xlim=c(0,1))
title("R colors")
mtext(paste("page ", page), SOUTH<-1, adj=1, line=-1)
base <- PerPage*(page-1)
# Column 1
remaining <- length(colors()) - base
ColumnSize <- ifelse(remaining < PerColumn, remaining, PerColumn)
rect(0.00, 0:(ColumnSize-1),
0.49, 1:ColumnSize,
border="black",
col=colors()[(base+1):(base+ColumnSize)])
text(0.045, 0.45+(0:(ColumnSize-1)), adj=1,
index[(base+1):(base+ColumnSize)], cex=0.6,
col=TextContrastColor[(base+1):(base+ColumnSize)])
text(0.06, 0.45+(0:(ColumnSize-1)), adj=0,
colors()[(base+1):(base+ColumnSize)], cex=0.6,
col=TextContrastColor[(base+1):(base+ColumnSize)])
save <- par(family="mono")  # use mono-spaced font with number columns
text(0.25, 0.45+(0:(ColumnSize-1)), adj=0,
HexAndDec[(base+1):(base+ColumnSize)], cex=0.6,
col=TextContrastColor[(base+1):(base+ColumnSize)])
par(save)
# Column 2
if (remaining > PerColumn)
{
remaining <- remaining - PerColumn
ColumnSize <- ifelse(remaining < PerColumn, remaining, PerColumn)
rect(0.51, 0:(ColumnSize-1),
1.00, 1:ColumnSize,
border="black",
col=colors()[(base+PerColumn+1):(base+PerColumn+ColumnSize)])
text(0.545, 0.45+(0:(ColumnSize-1)), adj=1,
index[(base+PerColumn+1):(base+PerColumn+ColumnSize)], cex=0.6,
col=TextContrastColor[(base+PerColumn+1):(base+PerColumn+ColumnSize)])
text(0.56, 0.45+(0:(ColumnSize-1)), adj=0,
colors()[(base+PerColumn+1):(base+PerColumn+ColumnSize)], cex=0.6,
col=TextContrastColor[(base+PerColumn+1):(base+PerColumn+ColumnSize)])
save <- par(family="mono")
text(0.75, 0.45+(0:(ColumnSize-1)), adj=0,
HexAndDec[(base+PerColumn+1):(base+PerColumn+ColumnSize)], cex=0.6,
col=TextContrastColor[(base+PerColumn+1):(base+PerColumn+ColumnSize)])
par(save)
}
}
par(oldparameters)
dev.off()
# efg, Stowers Institute for Medical Research
# efg's Research Notes:
#   http://research.stowers-institute.org/efg/R/Color/Chart
#
# 6 July 2004.  Modified 23 May 2005.
pdf("ColorChart.pdf", width=6, height=10)
# save to reset at end
oldparameters <- par(mar=c(1,1,2,1), mfrow=c(2,1))
# Be cautious in case definition of "colors" changes.
# Use some hard-coded constants since this is not expected
# to change.
stopifnot(length(colors()) == 657)
# 0. Setup
# For a given color, define a text color that will have good contrast.
#   Examples:
#     > SetTextContrastColor("white")
#     [1] "black"
#     > SetTextContrastColor("black")
#     [1] "white"
#     > SetTextContrastColor("red")
#     [1] "white"
#     > SetTextContrastColor("yellow")
#     [1] "black"
SetTextContrastColor <- function(color)
{
ifelse( mean(col2rgb(color)) > 127, "black", "white")
}
# Define this array of text contrast colors that correponds to each
# member of the colors() array.
TextContrastColor <- unlist( lapply(colors(), SetTextContrastColor) )
# 1a. Plot matrix of R colors, in index order, 25 per row.
# This example plots each row of rectangles one at a time.
colCount <- 25  # number per row
rowCount <- 27
plot( c(1,colCount), c(0,rowCount), type="n", ylab="", xlab="",
axes=FALSE, ylim=c(rowCount,0))
title("R colors")
mtext("http://research.stowers-institute.org/efg/R/Color/Chart",
cex=0.6)
for (j in 0:(rowCount-1))
{
base <- j*colCount
remaining <- length(colors()) - base
RowSize <- ifelse(remaining < colCount, remaining, colCount)
rect((1:RowSize)-0.5,j-0.5, (1:RowSize)+0.5,j+0.5,
border="black",
col=colors()[base + (1:RowSize)])
text((1:RowSize), j, paste(base + (1:RowSize)), cex=0.7,
col=TextContrastColor[base + (1:RowSize)])
}
# 1b.  Plot matrix of R colors, in "hue" order, 25 per row.
# This example plots each rectangle one at a time.
RGBColors <- col2rgb(colors()[1:length(colors())])
HSVColors <- rgb2hsv( RGBColors[1,], RGBColors[2,], RGBColors[3,], maxColorValue=255)
HueOrder  <- order( HSVColors[1,], HSVColors[2,], HSVColors[3,] )
plot(0, type="n", ylab="", xlab="",
axes=FALSE, ylim=c(rowCount,0), xlim=c(1,colCount))
title("R colors -- Sorted by Hue, Saturation, Value")
for (j in 0:(rowCount-1))
{
for (i in 1:colCount)
{
k <- j*colCount + i
if (k <= length(colors()))
{
rect(i-0.5,j-0.5, i+0.5,j+0.5, border="black", col=colors()[ HueOrder[k] ])
text(i,j, paste(HueOrder[k]), cex=0.7, col=TextContrastColor[ HueOrder[k] ])
}
}
}
# 2. Create 7-page color chart showing rectangle block of color, along with
# index, color name, and RGB constants in hex and decimal.
# Define string vector of RGB hex and decimal constants for given color
# as a string.
#   Example:
#     > GetColorHexAndDecimal("yellow")
#     [1] "#FFFF00   255 255   0"
GetColorHexAndDecimal <- function(color)
{
c <- col2rgb(color)
sprintf("#%02X%02X%02X   %3d %3d %3d", c[1],c[2],c[3], c[1], c[2], c[3])
}
# Restore, change and save graphics parameters
par(oldparameters)
oldparameters <- par(mar=c(1,1,1,1))
# Prepare text vectors to be displayed, in addition to color names.
index <- paste(1:length(colors()))
HexAndDec <- unlist( lapply(colors(), GetColorHexAndDecimal) )
PerColumn <- 50
PerPage   <- 2*PerColumn
# Plot a column of color rectangles at a time for each page.
for (page in 1: (trunc( (length(colors()) + (PerPage-1)) / PerPage) )  )
{
plot(0, type="n", ylab="", xlab="",
axes=FALSE, ylim=c(PerColumn,0), xlim=c(0,1))
title("R colors")
mtext(paste("page ", page), SOUTH<-1, adj=1, line=-1)
base <- PerPage*(page-1)
# Column 1
remaining <- length(colors()) - base
ColumnSize <- ifelse(remaining < PerColumn, remaining, PerColumn)
rect(0.00, 0:(ColumnSize-1),
0.49, 1:ColumnSize,
border="black",
col=colors()[(base+1):(base+ColumnSize)])
text(0.045, 0.45+(0:(ColumnSize-1)), adj=1,
index[(base+1):(base+ColumnSize)], cex=0.6,
col=TextContrastColor[(base+1):(base+ColumnSize)])
text(0.06, 0.45+(0:(ColumnSize-1)), adj=0,
colors()[(base+1):(base+ColumnSize)], cex=0.6,
col=TextContrastColor[(base+1):(base+ColumnSize)])
save <- par(family="mono")  # use mono-spaced font with number columns
text(0.25, 0.45+(0:(ColumnSize-1)), adj=0,
HexAndDec[(base+1):(base+ColumnSize)], cex=0.6,
col=TextContrastColor[(base+1):(base+ColumnSize)])
par(save)
# Column 2
if (remaining > PerColumn)
{
remaining <- remaining - PerColumn
ColumnSize <- ifelse(remaining < PerColumn, remaining, PerColumn)
rect(0.51, 0:(ColumnSize-1),
1.00, 1:ColumnSize,
border="black",
col=colors()[(base+PerColumn+1):(base+PerColumn+ColumnSize)])
text(0.545, 0.45+(0:(ColumnSize-1)), adj=1,
index[(base+PerColumn+1):(base+PerColumn+ColumnSize)], cex=0.6,
col=TextContrastColor[(base+PerColumn+1):(base+PerColumn+ColumnSize)])
text(0.56, 0.45+(0:(ColumnSize-1)), adj=0,
colors()[(base+PerColumn+1):(base+PerColumn+ColumnSize)], cex=0.6,
col=TextContrastColor[(base+PerColumn+1):(base+PerColumn+ColumnSize)])
save <- par(family="mono")
text(0.75, 0.45+(0:(ColumnSize-1)), adj=0,
HexAndDec[(base+PerColumn+1):(base+PerColumn+ColumnSize)], cex=0.6,
col=TextContrastColor[(base+PerColumn+1):(base+PerColumn+ColumnSize)])
par(save)
}
}
par(oldparameters)
dev.off()
HSVColors
example.dataset <- make.linear.data()
plot(example.dataset,col = 'dark blue')
## Set up JAGS model
jags.linear.model <- jags.model("simple-linear.jags.R",
data = list(x = example.dataset$x,
y = example.dataset$y,
N = nrow(example.dataset)),
inits = list(a = 0,
b = 0,
tau = 0.001),
n.chains = 8,
n.adapt = 1000)
cd
ls
getwd
getwd()
jags.linear.model <- jags.model("/Users/Bowen/Documents/R scripts/BAD/simple-linear.jags.R",
data = list(x = example.dataset$x,
y = example.dataset$y,
N = nrow(example.dataset)),
inits = list(a = 0,
b = 0,
tau = 0.001),
n.chains = 8,
n.adapt = 1000)
jags.linear.model <- jags.model("/Users/Bowen/Documents/R scripts/BAD/simple-linear.jags.R",
data = list(x = example.dataset$x,
y = example.dataset$y,
N = nrow(example.dataset)),
inits = list(a = 0,
b = 0,
sigma = 0.001),
n.chains = 8,
n.adapt = 1000)
jags.linear.model
samples <- jags.samples(jags.linear.model, c("a","b","tau"), n.iter = 100000)
samples
plot(samples$a)
plot(samples$a)
plot(samples$a)
)
)
linear.ols <- lm(y ~ x, data = example.dataset)
linear.ols
plot(samples$a, type = h)
?hist
hist(samples$a)
hist(samples$a, col = 'tomato1')
hist(samples$a, col = 'dodgerblue1')
## Import libraries
library(rjags)
## Create function for simulating data
make.linear.data <- function(n.data.points = 20, data.noise = 1, slope = 1, offset = 0) {
#   xs <- seq(from = 0.0, to = 1.0, length.out = n.data.points)
xs <- runif(n = n.data.points, min = 0, max = 1)
noise <- rnorm(n = n.data.points, mean = 0, sd = data.noise)
res <- data.frame(x = xs, y = ((slope*xs) + offset + noise))
return(res)
}
# Generate a set of data
example.dataset <- make.linear.data()
plot(example.dataset,col = 'dark blue')
## Set up JAGS model
# 'simple-linear.jags.R' is a jags file that defines the model, and must be parsed as an argument
jags.linear.model <- jags.model("/Users/Bowen/Documents/R scripts/BAD/simple-linear.jags.R",
data = list(x = example.dataset$x,
y = example.dataset$y,
N = nrow(example.dataset)),
inits = list(a = 0,
b = 0,
sigma = 0.001), # Initial parameter values
n.chains = 8, # Number of Markov Chains
n.adapt = 1000) # Burn in period
## Take samples from model
samples <- jags.samples(jags.linear.model, c("a","b","tau"), n.iter = 10000)
hist(samples$a, col = 'dodgerblue1')
hist(samples$b, col = 'antiquewhite1')
hist(samples$tau, col = 'lightblue1')
par(mfrow=c(3,1))
hist(samples$a, col = 'dodgerblue1')
hist(samples$b, col = 'antiquewhite1')
hist(samples$tau, col = 'lightblue1')
par(mfrow=c(3,1))
hist(samples$a, col = 'lightblue2')
hist(samples$b, col = 'antiquewhite1')
hist(samples$tau, col = 'lightblue1')
par(mfrow=c(3,1))
hist(samples$a, col = 'lightblue1')
hist(samples$b, col = 'lightblue2')
hist(samples$tau, col = 'lightblue3')
hist(samples$a, col = 'lightblue1')
hist(samples$b, col = 'lightblue2')
hist(samples$tau, col = 'antiquewhite1')
rgb(lightblue1)
var hexDigits = new Array
("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
//Function to convert hex format to a rgb color
function rgb2hex(rgb) {
rgb = rgb.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
return "#" + hex(rgb[1]) + hex(rgb[2]) + hex(rgb[3]);
}
function hex(x) {
return isNaN(x) ? "00" : hexDigits[(x - x % 16) / 16] + hexDigits[x % 16];
}
var hexDigits = new Array
("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
//Function to convert hex format to a rgb color
function rgb2hex(rgb) {
rgb = rgb.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
return "#" + hex(rgb[1]) + hex(rgb[2]) + hex(rgb[3]);
}
function hex(x) {
return isNaN(x) ? "00" : hexDigits[(x - x % 16) / 16] + hexDigits[x % 16];
}
# Load data (change path if necessary)
x = read.csv("/Users/Bowen/Desktop/TIMEDEC/timedecQualtrics.csv")
# Make sure plot package is installed
list.of.packages = c("corrplot", "psych")
new.packages = list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)){
install.packages(new.packages)
}
# Load package
lapply(list.of.packages, require, character.only = TRUE)
# Get indices of IPIP items
i = which(colnames(x) == 'IPIP_1'):which(colnames(x) == 'IPIP_50')
# Plot correlation matrix
corrplot(cor(x[,i]),
tl.cex = 0.5)
# Test reliabilities
print('Alphas for N, E, O, A, C')
for(j in seq(from = 1, to = 41, by = 10)){
k = i[j:(j + 9)]
print(alpha(x[,k])$total$std.alpha)
}
alpha?
q
?alpha
source('~/Downloads/interitem_correlation_check.R')
?corrplot
library(survival)
#Create some data
n <- 20;
dfr <- data.frame(
survdays = runif(n, 5, 15),
cens     = runif(n) < .3,
x        = rlnorm(n),
groups   = rep(c("first", "second"), each = n / 2)
)
#The Cox ph analysis
summary(coxph(Surv(survdays, cens) ~ x / groups, dfr))
x = read.csv("/Users/Bowen/Desktop/TIMEDEC/timedecQualtrics.csv")
list.of.packages = c("corrplot", "psych")
new.packages = list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)){
install.packages(new.packages)
}
# Load package
lapply(list.of.packages, require, character.only = TRUE)
x
i2 = which(colnames(x) == 'BIS_BAS_1'):which(colnames(x) == 'BIS_BAS_24')
# Plot correlation matrix
corrplot(cor(x[,i2]),
tl.cex = 0.5)
pwd
cd
wd
library(rjags)
# 1. unbiased coin with a beta dist over theta, single flip
m1.a.beta <- 1
m1.b.beta <- 1
m1.actual.theta <- 0.5
m1.n.flips <- 10
m1.data <-rbinom(1,m1.n.flips, m1.actual.theta)
m1.data
getwd
getwd()
setwd("/Users/Bowen/Documents/R scripts/)
""
ss)
))
qQ
""
setwd("/Users/Bowen/Documents/R scripts/")
m1.jags.model <- jags.model("hier1.jags",
data=list(y-m1.data,
m1.a.beta=m1.a.beta,
m1.b.beta=m1.b.beta,
n.flips=m1.n.flips),
n.chains=4,
n.adapt=1000)
m1.jags.model <- jags.model("hier1.jags",
data=list(y-m1.data,
m1.a.beta=m1.a.beta,
m1.b.beta=m1.b.beta,
n.flips=m1.n.flips),
n.chains=4,
n.adapt=1000)
m1.jags.model <- jags.model("hier1.jags",
data=list(y=m1.data,
m1.a.beta=m1.a.beta,
m1.b.beta=m1.b.beta,
n.flips=m1.n.flips),
n.chains=4,
n.adapt=1000)
m1.jags.sample <- coda.samples(m1.jags.model,
variable.names = c("theta"),
n.iter=5000)
m1.jags.sample
plot(m1.jags.sample)
m1a.jags.model <- jags.model("hier1a.jags",
data=list(a.beta=m1.a.beta,
b.beta=m1.b.beta),
n.chains=4,
n.adapt=1000)
m1.jags.sample <- coda.samples(m1.jags.model,
variable.names = c("theta"),
n.iter=5000)
m1a.jags.sample
m1a.jags.sample
m1a.jags.sample
m1a.jags.sample <- coda.samples(m1.jags.model,
variable.names = c("theta"),
n.iter=5000)
plot(m1a.jags.sample)
m1a.jags.sample <- coda.samples(m1a.jags.model,
variable.names = c("theta"),
n.iter=5000)
plot(m1a.jags.sample)
m1a.jags.sample <- coda.samples(m1a.jags.model,
variable.names = c("prior.theta"),
n.iter=5000)
plot(m1a.jags.sample)
m1b.jags.model <- jags.model("hier1b.jags",
data=list(a.beta=m1.a.beta,
b.beta=m1.b.beta),
n.chains=4,
n.adapt=1000)
m1b.jags.sample <- coda.samples(m1b.jags.model,
variable.names = c("prior.theta"),
n.iter=5000)
plot(m1b.jags.sample)
m1b.jags.model <- jags.model("hier1b.jags",
data=list(a.beta=m1.a.beta,
b.beta=m1.b.beta),
n.chains=4,
n.adapt=1000)
m1c.jags.model <- jags.model("hier1c.jags",
data=list(y=m1.data,
m1.a.beta=m1.a.beta,
m1.b.beta=m1.b.beta,
n.flips=m1.n.flips),
n.chains=4,
n.adapt=1000)
m1c.jags.model <- jags.model("hier1c.jags",
data=list(y=m1.data,
a.beta=m1.a.beta,
b.beta=m1.b.beta,
n.flips=m1.n.flips),
n.chains=4,
n.adapt=1000)
m1b.jags.sample <- coda.samples(m1c.jags.model,
variable.names = c("yi"),
n.iter=5000)
m1c.jags.sample <- coda.samples(m1c.jags.model,
variable.names = c("yi"),
n.iter=5000)
plot(m1c.jags.sample)
